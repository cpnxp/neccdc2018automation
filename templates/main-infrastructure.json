{
   "AWSTemplateFormatVersion": "2010-09-09",
   "Description": "This template will deploy a full Northeast CCDC environment. Must have full admin rights to deploy. ",
    "Metadata" : {
        "Stack" : {"Value" : "0"},
        "VersionDate" : { "Value" : "09292015" },
        "Identifier" : { "Value" : "main-infrastructure" },
        "Input" : { "Description" : "Input of all required parameters in nested stacks" },
        "Output" : { "Description" : "N/A" }
    },
   "Parameters": {
        "pCreateCloudTrail" : {
                "Description" : "Create new CloudTrail Trail (yes or no), if yes must provide pS3CloudTrailBucketExisting or pS3CloudTrailLocal parameter? 'no' will not setup any CloudTrail logging",
                "Type" : "String",
                "Default" : "no"
        },
        "pS3CloudTrailBucketExisting" : {
                "Description" : "Name of EXISTING S3 log bucket for CloudTrail if not creating new",
                "Type" : "String",
		"Default" : "none"
        },

        "pS3CloudTrailLocal" : {
                "Description" : "Name of new local bucket for S3 logging (required)",
                "Type" : "String",
		"Default" : "none"
        },
      "pKeyName": {
         "Description": "Key Name for Instance",
         "Type": "AWS::EC2::KeyPair::KeyName",
         "Default": ""
      },
      "pInstanceType": {
         "Description": "EC2 instance type",
         "Type": "String",
         "Default": "t2.micro",
         "AllowedValues": [
            "t1.micro",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "g2.2xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "cr1.8xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge"
         ],
         "ConstraintDescription": "must be a valid EC2 instance type, existing in the mapping."
      },
      "pAppInstanceType": {
         "Description": "Application Server EC2 instance type",
         "Type": "String",
         "Default": "m3.large",
         "AllowedValues": [
            "t1.micro",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "g2.2xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "cr1.8xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge"
         ],
         "ConstraintDescription": "must be a valid EC2 instance type, existing in the mapping."
      },
      "pRegionDomain": {
         "Description": "Region name where resources will deploy",
         "Type": "String",
         "Default": "us-east-1.compute.internal"
      },
      "pRegionAZ1Name": {
         "Description": "Availability Zone 1 Name in Region",
         "Type": "AWS::EC2::AvailabilityZone::Name",
	 "Default": "us-east-1a"
      },
      "pRegionAZ2Name": {
         "Description": "Availability Zone 2 Name in Region",
         "Type": "AWS::EC2::AvailabilityZone::Name",
	 "Default": "us-east-1b"
      },
      "pProductionVPCName": {
         "Description": "Production VPC Name",
         "Type": "String",
         "Default": "Production"
      },
      "pHAnetwork": {
	 "Description": "True if we want to build multiple AZs",
	 "Type": "String",
	 "Default": "false"
      },
      "pProductionCIDR": {
         "Description": "CIDR block for Production VPC",
         "Type": "String",
         "Default": "10.100.0.0/16",
         "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "pProductionPublicACIDR": {
         "Description": "CIDR block for ProductionPublic AZ-1b subnet",
         "Type": "String",
         "Default": "10.100.1.0/24",
         "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "pProductionPublicBCIDR": {
         "Description": "CIDR block for ProductionPublic AZ-1b subnet",
         "Type": "String",
         "Default": "10.100.2.0/24",
         "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "pProductionPrivateSubnetACIDR": {
         "Description": "CIDR block for Public AZ-1a subnet",
         "Type": "String",
         "Default": "10.100.11.0/24",
         "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "pProductionPrivateSubnetBCIDR": {
         "Description": "CIDR block for Public AZ-1b subnet",
         "Type": "String",
         "Default": "10.100.12.0/24",
         "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },

      "pManagementCIDR": {
         "Description": "CIDR block for Management VPC",
         "Type": "String",
         "Default": "10.10.0.0/16",
	 "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "pManagementPublicACIDR": {
         "Description": "CIDR block for Management AZ-1a subnet",
         "Type": "String",
         "Default": "10.10.1.0/24",
         "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "pManagementPublicBCIDR": {
         "Description": "CIDR block for Management AZ-1b subnet",
         "Type": "String",
         "Default": "10.10.2.0/24",
         "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "pManagementPrivateACIDR": {
	 "Description": "CIDR block for Private AZ-1a subnet",
	 "Type": "String",
	 "Default": "10.10.11.0/24",
	 "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
	 "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "pManagementPrivateBCIDR": {
	 "Description": "CIDR block for Private AZ-1b subnet",
	 "Type": "String",
	 "Default": "10.10.12.0/24",
	 "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
	 "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "pWebContentBucketName": {
         "Description": "Name of S3 Bucket to use for web content (optional)",
         "Type": "String",
	 "Default" : "none"
      },
      "pAppLogsBucketName": {
         "Description": "Name of S3 Bucket to use for application logs (optional)",
         "Type": "String",
	 "Default" : "none"
      },
      "pBackupBucketName": {
         "Description": "Name of S3 Bucket to use for backup/DR data (optional)",
         "Type": "String",
	 "Default" : "none"
      },
      "stack1URL": {
         "Description": "Valid S3 URL of location where infrastructure template exists",
         "Type": "String",
         "Default": "https://s3.amazonaws.com/neccdc2018/stack1-access.json"
      },
      "stack2URL": {
         "Description": "Valid S3 URL of location where Stack2 template exists",
         "Type": "String",
         "Default": "https://s3.amazonaws.com/neccdc2018/stack2-network.json"
      },
      "stack3URL": {
         "Description": "Valid S3 URL of location where Stack3 template exists",
         "Type": "String",
         "Default": "https://s3.amazonaws.com/neccdc2018/stack3-resources.json"
      },
      "stack4URL": {
         "Description": "Valid S3 URL of location where Stack4 template exists",
         "Type": "String",
	 "Default" : "https://s3.amazonaws.com/neccdc2018/stack4-application.json"
      },
      "pWebServerAMI": {
         "Description": "Which webserver AMI do you want to use, default ",
         "Type": "String",
	 "Default" : "ami-60b6c60a"
      },
      "pAppAmi": {
         "Description": "Which App AMI do you want to use?",
         "Type": "String",
	 "Default" : "ami-60b6c60a"
      },

      "pCreateProductionHA" : {
	 "Description" : "Create multiple availibility zones for production? (yes/no)",
	"Type" : "String",
	"Default" : "no"
      },

      "pCreateManagementHA" : {
	 "Description" : "Create multiple availibility zones for management? (yes/no)",
	"Type" : "String",
	"Default" : "no"
      },

      "pCreateVPCManagement" : {
	 "Description" : "Create Management VPC? (yes/no)",
	"Type" : "String",
	"Default" : "no"
      }

   },
   "Conditions": {
      "cCreateVPCManagement" : {
	 "Fn::Or" : [
            { "Fn::Equals": [{"Ref": "pCreateVPCManagement"},"yes"]},
	    { "Fn::Equals": [{"Ref": "pCreateVPCManagement"},"YES"]},
            { "Fn::Equals": [{"Ref": "pCreateVPCManagement"},"true"]},
	    { "Fn::Equals": [{"Ref": "pCreateVPCManagement"},"True"]}
         ]
      },
      "cCreateProductionHA" : {
	 "Fn::Or" : [
	    { "Fn::Equals": [{"Ref": "pCreateProductionHA"},"yes"]}, 
	    { "Fn::Equals": [{"Ref": "pCreateProductionHA"},"YES"]},
	    { "Fn::Equals": [{"Ref": "pCreateProductionHA"},"true"]}, 
	    { "Fn::Equals": [{"Ref": "pCreateProductionHA"},"True"]}
	 ]
      },
      "cCreateManagementHA" : {
	 "Fn::And" : [
	    { "Fn::Or" : [
	       { "Fn::Equals": [{"Ref": "pCreateManagementHA"},"yes"]},
	       { "Fn::Equals": [{"Ref": "pCreateManagementHA"},"YES"]},
	       { "Fn::Equals": [{"Ref": "pCreateManagementHA"},"true"]},
	       { "Fn::Equals": [{"Ref": "pCreateManagementHA"},"True"]} ]
	    },
    	    { "Fn::Or" : [
	       { "Fn::Equals": [{"Ref": "pCreateVPCManagement"},"yes"]},
	       { "Fn::Equals": [{"Ref": "pCreateVPCManagement"},"YES"]},
	       { "Fn::Equals": [{"Ref": "pCreateVPCManagement"},"true"]},
	       { "Fn::Equals": [{"Ref": "pCreateVPCManagement"},"True"]} ]
	    }
	 ]
      },
      "CreateWebAppBucket" : {
	 "Fn::Not" : [  {"Fn::Equals" : [ { "Ref" : "pWebContentBucketName" }, "none"] } ]
      },
      "CreateBackupBucket" : {
         "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "pBackupBucketName" }, "none"] } ]
      },
      "CreateAppLogsBucket" : {
         "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "pAppLogsBucketName" }, "none"] } ]
      },
      "CreateStack1": {
         "Fn::Not": [ { "Fn::Equals": [ { "Ref": "stack1URL" }, "" ] } ]
      },
      "CreateStack2": {
         "Fn::Not": [ { "Fn::Equals": [ { "Ref": "stack2URL" }, "" ] } ]
      },
      "CreateStack3": {
         "Fn::Not": [ { "Fn::Equals": [ { "Ref": "stack3URL" }, "" ] } ]
      },
      "CreateStack4": {
         "Fn::Not": [ { "Fn::Equals": [ { "Ref": "stack4URL" }, "" ] } ]
      }
   },
   "Resources": {
      "stack1": {
         "Type": "AWS::CloudFormation::Stack",
	 "Condition": "CreateStack1",
         "Properties": {
            "TemplateURL": {
               "Ref": "stack1URL"
            },
            "TimeoutInMinutes": "20",
	    "Parameters" : {
		"pCreateCloudTrail" : {
			"Ref" : "pCreateCloudTrail"
		},
		"pS3CloudTrailBucketExisting" : {
		    "Ref" : "pS3CloudTrailBucketExisting"
		},
		"pS3CloudTrailLocal" : {
		    "Ref" : "pS3CloudTrailLocal"
		}
	    }
         }
      },
      "stack2": {
         "Type": "AWS::CloudFormation::Stack",
         "Condition": "CreateStack2",
         "Properties": {
            "TemplateURL": {
               "Ref": "stack2URL"
            },
            "TimeoutInMinutes": "20",
            "Parameters": {
               "pRegionDomain": {
                  "Ref": "pRegionDomain"
               },
               "pRegionAZ1Name": {
                  "Ref": "pRegionAZ1Name"
               },
               "pRegionAZ2Name": {
                  "Ref": "pRegionAZ2Name"
               },
               "pProductionVPCName": {
                  "Ref": "pProductionVPCName"
               },
               "pProductionCIDR": {
                  "Ref": "pProductionCIDR"
               },
               "pProductionPublicACIDR": {
		  "Ref": "pProductionPublicACIDR"
               },
               "pProductionPublicBCIDR": {
		    "Fn::If" : [ "cCreateProductionHA", { "Ref" : "pProductionPublicBCIDR" }, "" ]
               },
               "pProductionPrivateSubnetACIDR": {
                  "Ref": "pProductionPrivateSubnetACIDR"
               },
               "pProductionPrivateSubnetBCIDR": {
                  "Ref": "pProductionPrivateSubnetBCIDR"
               },
               "pManagementPrivateACIDR": {
                  "Ref": "pManagementPrivateACIDR"
               },
               "pManagementCIDR": {
		    "Fn::If" : [ "cCreateVPCManagement", { "Ref" : "pManagementCIDR" }, "" ]
               },
               "pManagementPublicACIDR": {
		    "Fn::If" : [ "cCreateVPCManagement", { "Ref" : "pManagementPublicACIDR" }, ""]
               },
               "pManagementPublicBCIDR": {
		    "Fn::If" : [ "cCreateManagementHA", { "Ref" : "pManagementPublicBCIDR" },""]
               },
               "pKeyName": {
                  "Ref": "pKeyName"
               },
               "pManagementPrivateBCIDR": {
                  "Ref": "pManagementPrivateBCIDR"
               }
            }
         }
      },
      "stack3": {
         "Type": "AWS::CloudFormation::Stack",
         "Condition": "CreateStack3",
	 "DependsOn" : "stack2",
         "Properties": {
            "TemplateURL": {
               "Ref": "stack3URL"
            },
            "TimeoutInMinutes": "20",
            "Parameters": {
               "pProductionVPC": {
                  "Fn::GetAtt" : [ "stack2", "Outputs.rVPCProduction" ]
               },
               "pProductionCIDR": {
                  "Ref": "pProductionCIDR"
               },
               "pProductionPublicSubnetA": {
			"Fn::GetAtt" : [ "stack2", "Outputs.rSubnetProductionPublicA" ]
               },
               "pProductionPublicSubnetB": {
			"Fn::GetAtt" : [ "stack2", "Outputs.rSubnetProductionPublicB" ]
               },
               "pProductionPrivateSubnetA": {
			"Fn::GetAtt" : [ "stack2", "Outputs.rSubnetProductionPrivateA" ]
               },
               "pProductionPrivateSubnetB": {
			"Fn::GetAtt" : [ "stack2", "Outputs.rSubnetProductionPrivateB" ]
               },
               "pS3WebContentBucketName" : {
		"Fn::If" : [ "CreateWebAppBucket", { "Ref" : "pWebContentBucketName" },"false"]
               },
               "pS3AppLogsBucketName" : {
		 "Fn::If" : [ "CreateAppLogsBucket", { "Ref" : "pAppLogsBucketName" },"false"]
               },
               "pS3BackupBucketName": {
		 "Fn::If" : [ "CreateBackupBucket", { "Ref" : "pBackupBucketName" },"false"]
               },
               "pVPCManagement": {
			"Fn::If" : [ "cCreateVPCManagement", { "Fn::GetAtt": ["stack2","Outputs.rVPCManagement" ] },"false"]
               }
            }
         }
      },
      "stack4": {
         "Type": "AWS::CloudFormation::Stack",
	 "DependsOn" : "stack3",
         "Condition": "CreateStack4",
         "Properties": {
            "TemplateURL": {
               "Ref": "stack4URL"
            },
            "TimeoutInMinutes": "30",
            "Parameters": {
               "pProductionVPC": {
		 "Fn::GetAtt" : [ "stack2", "Outputs.rVPCProduction" ]
               },
               "pProductionCIDR": {
                  "Ref": "pProductionCIDR"
               },
               "pProductionPublicSubnetA": {
		 "Fn::GetAtt" : [ "stack2", "Outputs.rSubnetProductionPublicA" ]
               },
               "pProductionPublicSubnetB": {
		 "Fn::GetAtt" : [ "stack2", "Outputs.rSubnetProductionPublicB" ]
               },
               "pManagementPrivateSubnetA": {
		 "Fn::GetAtt" : [ "stack2", "Outputs.rSubnetManagementPrivateA" ]
               },
               "pManagementPrivateSubnetB": {
		 "Fn::GetAtt" : [ "stack2", "Outputs.rSubnetManagementPrivateB" ]
               },
               "pProductionPrivateSubnetA": {
		 "Fn::GetAtt" : [ "stack2", "Outputs.rSubnetProductionPrivateA" ]
               },
               "pProductionPrivateSubnetB": {
		 "Fn::GetAtt" : [ "stack2", "Outputs.rSubnetProductionPrivateB" ]
               },
               "pKeyName": {
                  "Ref": "pKeyName"
               },
               "pRegionAZ1Name": {
                  "Ref": "pRegionAZ1Name"
               },
               "pRegionAZ2Name": {
                  "Ref": "pRegionAZ2Name"
               },
               "pInstanceType": {
                  "Ref": "pInstanceType"
               },
               "pAppInstanceType": {
                  "Ref": "pAppInstanceType"
               },
               "pSecurityGroupWeb": {
                  "Fn::GetAtt": [
                     "stack3",
                     "Outputs.rSecurityGroupWeb"
                  ]
               },
               "pSecurityGroupApp": {
                  "Fn::GetAtt": [
                     "stack3",
                     "Outputs.rSecurityGroupApp"
                  ]
               },
               "pSecurityGroupMgmtBastionHost": {
                  "Fn::GetAtt": [
                     "stack3",
                     "Outputs.rSecurityGroupMgmtBastionHost"
                  ]
               },
               "pWebServerAMI": {
                  "Ref": "pWebServerAMI"
               },
               "pAppAmi": {
                  "Ref": "pAppAmi"
               },

               "pManagementPublicSubnetA": {
		   "Fn::If" : [ "cCreateVPCManagement", { "Fn::GetAtt": ["stack2","Outputs.rSubnetManagementPublicA" ] },"false"]
               }
		}
         }
      }
   },
   "Outputs": {
      "TemplateType": {
         "Value": "Standard Multi-Tier Web Application"
      },
      "TemplateVersion": {
         "Value": "1.0"
      }
   }
}
